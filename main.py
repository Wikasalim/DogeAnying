# Python code @beducode
 

import base64, codecs
magic = 'aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IHRpbWUNCmltcG9ydCBzeXMNCmltcG9ydCByYW5kb20NCmltcG9ydCBvcw0KaW1wb3J0IGFyZ3BhcnNlDQppbXBvcnQgY29sb3JhbWENCmltcG9ydCBzdHJpbmcNCmltcG9ydCB0cmFjZWJhY2sNCmltcG9ydCB1cmxsaWINCmltcG9ydCBwYXRobGliDQpmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBCYWNrLCBTdHlsZQ0KZnJvbSByYW5kb20gaW1wb3J0IHJhbmRpbnQNCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lDQppbXBvcnQgcHlzaG9ydGVuZXJzDQpmcm9tIHVybGxpYi5yZXF1ZXN0IGltcG9ydCBSZXF1ZXN0LCB1cmxvcGVuDQpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cA0KZnJvbSBmYWtlX3VzZXJhZ2VudCBpbXBvcnQgVXNlckFnZW50DQpmcm9tIG9zIGltcG9ydCBzeXN0ZW0sIG5hbWUNCmZyb20gaW5wdXRpbWVvdXQgaW1wb3J0IGlucHV0aW1lb3V0LCBUaW1lb3V0T2NjdXJyZWQNCmZyb20gZmF1bmFkYiBpbXBvcnQgcXVlcnkgYXMgcQ0KZnJvbSBmYXVuYWRiLm9iamVjdHMgaW1wb3J0IFJlZg0KZnJvbSBmYXVuYWRiLmNsaWVudCBpbXBvcnQgRmF1bmFDbGllbnQNCmNvbG9yYW1hLmluaXQoYXV0b3Jlc2V0PVRydWUpDQoNCiMgU0VUIEJFVFNFVA0KcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoDQogICAgZGVzY3JpcHRpb249Jzk5OSBEaWNlIEJvdCB8IFRoaXMgSXMgR2FtYmxpbmcgQm90IFBsYXNlIFRha2UgT3duIFlvdXIgUmlzaycpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KA0KICAgICctYycsICctLWJldHNldCcsDQogICAgZGVmYXVsdD0wLA0KICAgIGhlbHA9J0VudGVyIFlvdXIgQmV0c2V0IE51bWJlciAoZGVmYXVsdDogMCknDQopDQpteV9uYW1lc3BhY2UgPSBwYXJzZXIucGFyc2VfYXJncygpDQoNCndpdGggb3Blbignc2V0dGluZ3MuanNvbicsICdyJykgYXMgbXlmaWxlOg0KICAgIGRhdGEgPSBteWZpbGUucmVhZCgpDQojIFBBUlNFIEZJTEUNCm9iaiA9IGpzb24ubG9hZHMoZGF0YSkNCg0KDQojIENPTkZJRyBXQVJOQQ0KcmVzID0gU3R5bGUuUkVTRVRfQUxMDQpwdXRpaCA9IFN0eWxlLk5PUk1BTCtGb3JlLldISVRFDQpwdXRpaDIgPSBTdHlsZS5CUklHSFQrRm9yZS5XSElURQ0KaGl0YW0gPSBTdHlsZS5CUklHSFQrRm9yZS5CTEFDSw0KaGl0YW0yID0gU3R5bGUuQlJJR0hUK0ZvcmUuQkxBQ0sNCnVuZ3UgPSBTdHlsZS5OT1JNQUwrRm9yZS5NQUdFTlRBDQpoaWphdSA9IFN0eWxlLk5PUk1BTCtGb3JlLkdSRUVODQpoaWphdTIgPSBTdHlsZS5CUklHSFQrRm9yZS5HUkVFTg0KbWVyYWggPSBTdHlsZS5OT1JNQUwrRm9yZS5SRUQNCm1lcmFoMiA9IFN0eWxlLkJSSUdIVCtGb3JlLlJFRA0KYmlydSA9IFN0eWxlLk5PUk1BTCtGb3JlLkJMVUUNCmJpcnUyID0gU3R5bGUuQlJJR0hUK0ZvcmUuQkxVRQ0KYmlydTMgPSBTdHlsZS5CUklHSFQrRm9yZS5MSUdIVENZQU5fRVgNCnByb2ZpdGNvbG9yID0gU3R5bGUuQlJJR0hUK0JhY2suR1JFRU4rRm9yZS5XSElURQ0KbG9zZWNvbG9yID0gU3R5bGUuQlJJR0hUK0JhY2suUkVEK0ZvcmUuV0hJVEUNCnJjY29sb3IgPSBTdHlsZS5CUklHSFQrQmFjay5XSElURStGb3JlLkJMQUNLDQpyY2ZvbnRjb2xvciA9IFN0eWxlLk5PUk1BTCtGb3JlLkJMQUNLDQprdW5pbmcgPSBTdHlsZS5OT1JNQUwrRm9yZS5ZRUxMT1cNCmt1bmluZzIgPSBTdHlsZS5CUklHSFQrRm9yZS5ZRUxMT1cNCg0KYyA9IHJlcXVlc3RzLnNlc3Npb24oKQ0KdWEgPSBVc2VyQWdlbnQoKQ0KcHJveGllcyA9IFtdDQpwcm94eXN0YXR1cyA9IEZhbHNlDQpmcmVldmVyc2lvbiA9IEZhbHNlDQpsaW5rY29kZSA9ICIiDQpjbGllbnQgPSBGYXVuYUNsaWVudChzZWNyZXQ9ImZuQUVBY0FLbGlBQ0NKSDAwQmZWU0gyZFBaMEVJTVBXSGxNQ1RiRVgiKQ0KDQpkZWYgdGltZXByb2Nlc3Moc2VjKToNCiAgICBub3cgPSBkYXRldGltZS5ub3coKQ0KICAgIG1pbnMgPSBzZWMgLy8gNjANCiAgICBzZWMgPSBzZWMgJSA2MA0KICAgIGhvdXJzID0gbWlucyAvLyA2MA0KICAgIG1pbnMgPSBtaW5zICUgNjANCiAgICBzdG9wd2F0Y2h4ID0gZGF0ZXRpbWUobm93LnllYXIsIG5vdy5tb250aCwgbm93LmRheSwgaW50KGhvdXJzKSwgaW50KG1pbnMpLCBpbnQoc2VjKSwgMCkNCiAgICANCiAgICByZXR1cm4gc3RvcHdhdGNoeA0KDQpkZWYgc2V0bXNnYm94KCk6DQogICAgDQogICAgdHJ5Og0KICAgICAgICBtc2cgPSBjbGllbnQucXVlcnkoDQogICAgICAgICAgICBxLmdldChxLm1hdGNoKHEuaW5kZXgoInBhcmFtX2J5X2lkIiksICJtZXNzYWdlYm94IikpKQ0KICAgICAgICBtc2dib3ggPSBtc2dbImRhdGEiXVsibWVzc2FnZSJdDQogICAgZXhjZXB0Og0KICAgICAgICBtc2dib3ggPSAiLSINCg0KICAgIHJldHVybiBtc2dib3gNCg0KDQpkZWYgYmFubmVyKCk6DQogICAgIyBCQU5ORVINCiAgICBiYW5uZXIgPSAiXG5cbiINCiAgICBiYW5uZXIgPSBiYW5uZXIgKyBtZXJhaDIgKyAiwrfiloTiloTiloTiloQgIOKWqiAgIOKWhOKWhMK3IOKWhOKWhOKWhCAu4paE4paE4paE4paEwrcgICAgICDiloTiloTiloTiloTiloRcbiINCiAgICBiYW5uZXIgPSBiYW5uZXIgKyAi4paI4paI4paqIOKWiOKWiCDilojilogg4paQ4paIIOKWjOKWquKWgOKWhC7iloDCt+KWkOKWiCDiloDilojilqrilqogICAg4oCi4paI4paIICBcbiINCiAgICBiYW5uZXIgPSBiYW5uZXIgKyAi4paQ4paIwrcg4paQ4paI4paM4paQ4paIwrfilojilogg4paE4paE4paQ4paA4paA4paq4paE4paQ4paI4paA4paA4paI4paEIOKWhOKWiOKWgOKWhCDilpDiloguIiArIHB1dGloMiArICLilqpcbiINCiAgICBiYW5uZXIgPSBiYW5uZXIgKyAi4paI4paILiDilojilogg4paQ4paI4paM4paQ4paI4paI4paI4paM4paQ4paI4paE4paE4paM4paI4paI4paE4paq4paQ4paI4paQ4paI4paMLuKWkOKWjOKWkOKWiOKWjMK3XG4iDQogICAgYmFubmVyID0gYmFubmVyICsgIuKWgOKWgOKWgOKWgOKWgOKAoiDiloDiloDiloDCt+KWgOKWgOKWgCAg4paA4paA4paAIMK34paA4paA4paA4paAICDiloDilojiloTiloDilqriloDiloDiloBcbiINCiAgICBiYW5uZXIgPSBiYW5uZXIgKyAiXG4iDQogICAgYmFubmVyID0gYmFubmVyICsgcHV0aWgyICsgIkF1dGhvciAgICAgIDogIg0KICAgIGJhbm5lciA9IGJhbm5lciArIG1lcmFoMiArICJnaXRodWJAYmVkdWNvZGVcbiINCiAgICBiYW5uZXIgPSBiYW5uZXIgKyBwdXRpaDIgKyAiQWR2aXNvciAgICAgOiAiDQogICAgYmFubmVyID0gYmFubmVyICsgbWVyYWgyICsgIkByaW9zdXlhbnRvXG4iDQogICAgYmFubmVyID0gYmFubmVyICsgcHV0aWgyICsgIkNvbnRhY3QgICAgIDogIg0KICAgIGJhbm5lciA9IGJhbm5lciArIG1lcmFoMiArICJAYmVkdXBsYXkgLyBAcmlvc3V5YW50b1xuIg0KICAgIGJhbm5lciA9IGJhbm5lciArIHB1dGloMiArICJWZXJzaW9uICAgICA6ICINCiAgICBiYW5uZXIgPSBiYW5uZXIgKyBtZXJhaDIgKyAidi4yLjFcbiIgKyByZXMNCiAgICBwcmludChiYW5uZXIpDQoNCg0KdXJsID0gImh0dHBzOi8vd3d3Ljk5OWRvZ2UuY29tL2FwaS93ZWIuYXNweCINCnVhZGF0YSA9IHsNCiAgICAiT3JpZ2luIjogImZpbGU6Ly8iLA0KICAgICJ1c2VyLWFnZW50IjogdWEucmFuZG9tLA0KICAgICJDb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwNCiAgICAiQWNjZXB0IjogIiovKiIsDQogICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJpZC1JRCxpZDtxPTAuOSxlbi1VUztxPTAuOCxlbjtxPTAuNyIsDQogICAgIlgtUmVxdWVzdGVkLVdpdGgiOiAiY29tLnJlbGFuZC5yZWxhbmRpY2Vib3QiDQp9DQoNCiMgQ0xFQU4gUEFHRQ0KDQpkZWYgY2xlYXIoKToNCg0KICAgICMgZm9yIHdpbmRvd3MNCiAgICBpZiBuYW1lID09ICdudCc6DQogICAgICAgIF8gPSBzeXN0ZW0oJ2NscycpDQoNCiAgICAjIGZvciBtYWMgYW5kIGxpbnV4KGhlcmUsIG9zLm5hbWUgaXMgJ3Bvc2l4JykNCiAgICBlbHNlOg0KICAgICAgICBfID0gc3lzdGVtKCdjbGVhcicpDQoNCiMgQ09OVkVSVCBCRVQgJiBBTU9VTlQNCg0KDQpkZWYga29udmVydChwZXJzZW4sIHRhcnVoYW4pOg0KICAgIGdsb2JhbCBoaWdoDQogICAgZ2xvYmFsIGxvdw0KICAgIGMgPSBzdHIoOTk5OTk5ICogZmxvYXQocGVyc2VuKSAvIDEwMCkNCiAgICBpZiB0YXJ1aGFuID09ICJIaSIgb3IgdGFydWhhbiA9PSAiaGkiIG9yIHRhcnVoYW4gPT0gIkhJIjoNCiAgICAgICAgbiA9IHN0cihjLnNwbGl0KCIuIilbMV0pDQogICAgICAgIHBhbmdrYXQgPSA2IC0gbGVuKG4pDQogICAgICAgIGxvdyA9IGludChpbnQobikgKiAoMTAgKiogcGFuZ2thdCkpDQogICAgICAgIGhpZ2ggPSA5OTk5OTkNCiAgICBpZiB0YXJ1aGFuID09ICJMbyIgb3IgdGFydWhhbiA9PSAiTE9XIiBvciB0YXJ1aGFuID09ICJsb3ciIG9yIHRhcnVoYW4gPT0gIkxvdyIgb3IgdGFydWhhbiA9PSAiTE8iOg0KICAgICAgICBsb3cgPSAwDQogICAgICAgIGhpZ2ggPSBpbnQoYy5zcGxpdCgiLiIpWzBdKQ0KDQojIERFQ0lNQUwgOCBESUdJVA0KDQoNCmRlZiByZXYobnVtKToNCiAgICBpZiAobGVuKG51bSkgPCA4KToNCiAgICAgICAgcGFuamFuZ19ub2wgPSBpbnQoOCAtIGxlbihudW0pKQ0KICAgICAgICBudW0gPSAoKHBhbmphbmdfbm9sKiIwIikrc3RyKG51bSkpDQogICAgICAgIHJlc3VsdCA9ICgiMC4iK251bSkNCiAgICBpZiAobGVuKG51bSkgPT0gOCk6DQogICAgICAgIHBhbmphbmdfbm9sID0gaW50KDggLSBsZW4obnVtKSkNCiAgICAgICAgbnVtID0gKChwYW5qYW5nX25vbCoiMCIpK3N0cihudW0pKQ0KICAgICAgICByZXN1bHQgPSAoIjAuIitudW0pDQogICAgZWxzZToNCiAgICAgICAgbGVuX251bSA9IGxlbihudW0pDQogICAgICAgIGVuZCA9IG51bVstODpdDQogICAgICAgIGZpcnN0ID0gbnVtWzpsZW5fbnVtLThdDQogICAgICAgIHJlc3VsdCA9IChmaXJzdCsiLiIrZW5kKQ0KICAgIHJldHVybiAocmVzdWx0KQ0KDQojIEFQSSBJTkRPREFYIEZPUiBHRVQgTEFTVCBQUklDRQ0KDQoNCmRlZiBpbmRvZGF4KGNvaW4pOg0KICAgIA0KICAgIHRyeToNCiAgICAgICAgaWYgY29pbiA9PSAiRE9HRSIgb3IgY29pbiA9PSAiZG9nZSIgb3IgY29pbiA9PSAiRG9nZSI6DQogICAgICAgICAgICBwYWlyID0gImRvZ2VfaWRyIg0KICAgICAgICBlbGlmIGNvaW4gPT0gIkxUQyIgb3IgY29pbiA9PSAibHRjIiBvciBjb2luID09ICJMdGMiOg0KICAgICAgICAgICAgcGFpciA9ICJsdGNfaWRyIg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcGFpciA9ICJldGhfaWRyIg0KICAgICAgICAgICAgDQogICAgICAgIHVybCA9ICdodHRwczovL2luZG9kYXguY29tL2FwaS8nICsgc3RyKHBhaXIpICsgJy90aWNrZXInDQoNCiAgICAgICAgaW5keCA9IHJlcXVlc3RzLmdldCh1cmwpDQogICAgICAgIGpzaW5keCA9IGpzb24ubG9hZHMoaW5keC50ZXh0KQ0KICAgICAgICBwcmljZXBhaXIgPSBpbnQoanNpbmR4WyJ0aWNrZXIiXVsibGFzdCJdKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgaWYgY29pbiA9PSAiRE9HRSIgb3IgY29pbiA9PSAiZG9nZSIgb3IgY29pbiA9PSAiRG9nZSI6DQogICAgICAgICAgICBjb2lucGFpciA9ICJkb2dlIg0KICAgICAgICBlbGlmIGNvaW4gPT0gIkxUQyIgb3IgY29pbiA9PSAibHRjIiBvciBjb2luID09ICJMdGMiOg0KICAgICAgICAgICAgY29pbnBhaXIgPSAibHRjIg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgY29pbnBhaXIgPSAiZXRoIg0KICAgICAgICAgICAgDQogICAgICAgIHVybCA9ICJodHRwczovL2JlZHVjb2RlLXByaWNlLmhlcm9rdWFwcC5jb20vcHJpY2UvIiArIHN0cihjb2lucGFpcikNCg0KICAgICAgICBwcmljZSA9IGMuZ2V0KHVybCkNCiAgICAgICAgZGF0YSA9IGpzb24ubG9hZHMocHJpY2UudGV4dCkNCiAgICAgICAgcHJpY2VwYWlyID0gZGF0YVsibGFzdCJdDQoNCiAgICByZXR1cm4gcHJpY2VwYWlyDQoNCiMgRk9STUFUIFZBTFVFIFRPIElEUg0KDQoNCmRlZiBydXBpYWhfZm9ybWF0KGFuZ2thKToNCiAgICByZXR1cm4gJ1JwICcgKyAnezowLC4yZn0nLmZvcm1hdChhbmdrYSkNCg0KIyBHRU5FUkFURSBTVFJJTkcNCg0KDQpkZWYgc3RyaW5nZ2VuKE4pOg0KICAgIHJlc3AgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV91cHBlcmNhc2UgKyBzdHJpbmcuZGlnaXRzLCBrPU4pKQ0KICAgIHJldHVybiBzdHIocmVzcCkNCg0KDQojIEZJTkQgUFJPWFkNCmRlZiBmaW5kcHJveHkoKToNCiAgICAjIFJldHJpZXZlIGxhdGVzdCBwcm94aWVzDQogICAgcHJveGllc19yZXEgPSBSZXF1ZXN0KCdodHRwczovL3d3dy5zc2xwcm94aWVzLm9yZy8nKQ0KICAgIHByb3hpZXNfcmVxLmFkZF9oZWFkZXIoJ1VzZXItQWdlbnQnLCB1YS5yYW5kb20pDQogICAgcHJveGllc19kb2MgPSB1cmxvcGVuKHByb3hpZXNfcmVxKS5yZWFkKCkuZGVjb2RlKCd1dGY4JykNCg0KICAgIHNvdXAgPSBCZWF1dGlmdWxTb3VwKHByb3hpZXNfZG9jLCAnaHRtbC5wYXJzZXInKQ0KICAgIHByb3hpZXNfdGFibGUgPSBzb3VwLmZpbmQoaWQ9J3Byb3h5bGlzdHRhYmxlJykNCg0KICAgICMgU2F2ZSBwcm94aWVzIGluIHRoZSBhcnJheQ0KICAgIGZvciByb3cgaW4gcHJveGllc190YWJsZS50Ym9keS5maW5kX2FsbCgndHInKToNCiAgICAgICAgcHJveGllcy5hcHBlbmQoew0KICAgICAgICAgICAgJ2lwJzogICByb3cuZmluZF9hbGwoJ3RkJylbMF0uc3RyaW5nLA0KICAgICAgICAgICAgJ3BvcnQnOiByb3cuZmluZF9hbGwoJ3RkJylbMV0uc3RyaW5nDQogICAgICAgIH0pDQoNCiAgICAjIENob29zZSBhIHJhbmRvbSBwcm94eQ0KICAgIHByb3h5X2luZGV4ID0gcmFuZG9tX3Byb3h5KCkNCiAgICBwcm94eSA9IHByb3hpZXNbcHJveHlfaW5kZXhdDQoNCiAgICBmb3IgbiBpbiByYW5nZSgxLCAxMDApOg0KICAgICAgICByZXEgPSBSZXF1ZXN0KCdodHRwOi8vd3d3Ljk5OWRvZ2UuY29tJykNCiAgICAgICAgcmVxLnNldF9wcm94eShwcm94eVsnaXAnXSArICc6JyArIHByb3h5Wydwb3J0J10sICdodHRwJykNCg0KICAgICAgICAjIEV2ZXJ5IDEwIHJlcXVlc3RzLCBnZW5lcmF0ZSBhIG5ldyBwcm94eQ0KICAgICAgICBpZiBuICUgMTAgPT0gMDoNCiAgICAgICAgICAgIHByb3h5X2luZGV4ID0gcmFuZG9tX3Byb3h5KCkNCiAgICAgICAgICAgIHByb3h5ID0gcHJveGllc1twcm94eV9pbmRleF0NCg0KICAgICAgICAjIE1ha2UgdGhlIGNhbGwNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcHJpbnQoJyAgTW9ob24gdHVuZ2d1LCBzZWRhbmcgbWVuY2FyaSBwcm94eSBzZWJlbHVtIHJ1bm5pbmcuLi4gJyArIFN0eWxlLkJSSUdIVCtCYWNrLkdSRUVOICsNCiAgICAgICAgICAgICAgICAgIEZvcmUuV0hJVEUgKyAnIENIRUNLIFNFUlZFUiAjICcgKyBzdHIocHJveHlfaW5kZXgpICsgJyAnICsgU3R5bGUuUkVTRVRfQUxMICsgJyAnLCBlbmQ9IlxyIiArIHJlcykNCiAgICAgICAgICAgIHVybG9wZW4ocmVxLCB0aW1lb3V0PTUpLnJlYWQoKS5kZWNvZGUoJ3V0ZjgnKQ0KICAgICAgICAgICAgcmV0dXJuIHByb3hpZXNbcHJveHlfaW5kZXhdDQogICAgICAgIGV4Y2VwdDogICMgSWYgZXJyb3IsIGRlbGV0ZSB0aGlzIHByb3h5IGFuZCBmaW5kIGFub3RoZXIgb25lDQogICAgICAgICAgICBkZWwgcHJveGllc1twcm94eV9pbmRleF0NCiAgICAgICAgICAgIHByb3h5X2luZGV4ID0gcmFuZG9tX3Byb3h5KCkNCiAgICAgICAgICAgIHByb3h5ID0gcHJveGllc1twcm94eV9pbmRleF0NCg0KDQpkZWYgY2VrcHJveHltYW51YWwoaXAsIHBvcnQpOg0KICAgIHJlcSA9IFJlcXVlc3QoJ2h0dHA6Ly93d3cuOTk5ZG9nZS5jb20nKQ0KICAgIHJlcS5zZXRfcHJveHkoaXAgKyAnOicgKyBwb3J0LCAnaHR0cCcpDQogICAgdHJ5Og0KICAgICAgICB1cmxvcGVuKHJlcSwgdGltZW91dD01KS5yZWFkKCkuZGVjb2RlKCd1dGY4JykNCiAgICAgICAgc3RhdHVzID0gVHJ1ZQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgc3RhdHVzID0gRmFsc2UNCg0KICAgIHJldHVybiBzdGF0dXMNCg0KDQpkZWYgcmFuZG9tX3Byb3h5KCk6DQogICAgcmV0dXJuIHJhbmRvbS5yYW5kaW50KDAsIGxlbihwcm94aWVzKSAtIDEpDQoNCg0KZGVmIHNldFByb3h5KCk6DQogICAgaWYgb2JqWyJQcm94eSBNYW51YWwiXVsiVG9nZ2xlIl0gPT0gIk9OIiBvciBvYmpbIlByb3h5IE1hbnVhbCJdWyJUb2dnbGUiXSA9PSAib24iIG9yIG9ialsiUHJveHkgTWFudWFsIl1bIlRvZ2dsZSJdID09ICJPbiI6DQogICAgICAgIGlwID0gc3RyKG9ialsiUHJveHkgTWFudWFsIl1bIklwIl0pDQogICAgICAgIHBvcnQgPSBzdHIob2JqWyJQcm94eSBNYW51YWwiXVsiUG9ydCJdKQ0KICAgICAgICBwcm94eXN0YXR1cyA9IGNla3Byb3h5bWFudWFsKGlwLCBwb3J0KQ0KDQogICAgICAgIGlmIHByb3h5c3RhdHVzIGlzIFRydWU6DQogICAgICAgICAgICBwcm94aWVzID0gZGljdCgpDQoNCiAgICAgICAgICAgIHByb3hpZXNbImlwIl0gPSBpcA0KICAgICAgICAgICAgcHJveGllc1sicG9ydCJdID0gcG9ydA0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcHJveHlzdGF0dXMgPSBGYWxzZQ0KDQogICAgZWxzZToNCiAgICAgICAgaWYgb2JqWyJBY2NvdW50Il1bIkF1dG8gUHJveHkiXSA9PSAiT04iIG9yIG9ialsiQWNjb3VudCJdWyJBdXRvIFByb3h5Il0gPT0gIm9uIiBvciBvYmpbIkFjY291bnQiXVsiQXV0byBQcm94eSJdID09ICJPbiI6DQoNCiAgICAgICAgICAgICMgQ0xFQVIgQkVGT1JFIFJVTk5JTkcNCiAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgIGJhbm5lcigpDQoNCiAgICAgICAgICAgIHByb3h5c3RhdHVzID0gVHJ1ZQ0KICAgICAgICAgICAgcHJveGllcyA9IGZpbmRwcm94eSgpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwcm94eXN0YXR1cyA9IEZhbHNlDQoNCg0KZGVmIGNoZWNrY3VycihjdXJyKToNCiAgICBpZiBjdXJyID09ICJET0dFIiBvciBjdXJyID09ICJkb2dlIiBvciBjdXJyID09ICJEb2dlIjoNCiAgICAgICAgY3VycmJhbGFuY2UgPSBqc1tjdXJyZW5jeV1bIkJhbGFuY2UiXQ0KICAgIGVsaWYgY3VyciA9PSAiTFRDIiBvciBjdXJyID09ICJsdGMiIG9yIGN1cnIgPT0gIkx0YyI6DQogICAgICAgIGN1cnJiYWxhbmNlID0ganNbY3VycmVuY3ldWyJCYWxhbmNlIl0NCiAgICBlbHNlOg0KICAgICAgICBjdXJyYmFsYW5jZSA9IGpzW2N1cnJlbmN5XVsiQmFsYW5jZSJdDQoNCiAgICByZXR1cm4gY3VycmJhbGFuY2UNCg0KDQpkZWYgY2hlY2tsb2dpbihzdGF0dXMpOg0KICAgIGlmIHN0YXR1cyBpcyBUcnVlOg0KICAgICAgICBjbGVhcigpDQogICAgICAgIGJhbm5lcigpDQoNCiAgICAgICAgcHJpbnQobWVyYWgyICsgIlBlcmlrc2EgS2VtYmFsaSBVc2VybmFtZSBBdGF1IFBhc3N3b3JkIEFuZGEgUGFkYSBGaWxlIHNldHRpbmdzLmpzb24iICsgcmVzKQ0KICAgICAgICBzeXMuZXhpdCgpDQogICAgZWxzZToNCiAgICAgICAgcGFzcw0KDQoNCiMgRk9SIFBVQkxJQyBWRVJTSU9ODQpkZWYgY2hlY2tjY291bnQoYmFsYWNjLCB2ZXJzaW9uLCBjdXJyKToNCg0KICAgIGlmIGN1cnIgPT0gIkRPR0UiIG9yIGN1cnIgPT0gImRvZ2UiIG9yIGN1cnIgPT0gIkRvZ2UiOg0KICAgICAgICBsaW1pdGJhbCA9IDEwMA0KICAgIGVsaWYgY3VyciA9PSAiTFRDIiBvciBjdXJyID09ICJsdGMiIG9yIGN1cnIgPT0gIkx0YyI6DQogICAgICAgIGxpbWl0YmFsID0gMC4wMDAxDQogICAgZWxzZToNCiAgICAgICAgbGltaXRiYWwgPSAwLjAwMDAxDQoNCiAgICBpZiB2ZXJzaW9uIGlzIFRydWU6DQogICAgICAgIGlmIGJhbGFjYyA+IGludChmbG9hdChsaW1pdGJhbCkqKDEwICoqIDgpKToNCiAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgIGJhbm5lcigpDQoNCiAgICAgICAgICAgIHByaW50KG1lcmFoMiArICJBbmRhIEhhbnlhIERhcGF0IE1lbmdndW5ha2FuIEJhbGFuY2UgTWFrc2ltYWwgIiArIHN0cihsaW1pdGJhbCkgKyAiICIgKw0KICAgICAgICAgICAgICAgICAgc3RyKGN1cnIpLnVwcGVyKCkgKyAiIFBhZGEgVmVyc2kgSW5pLCBTaWxhaGthbiBIdWJ1bmdpIENvbnRhY3QgVW50dWsgSW5mb3JtYXNpIExlYmloIExhbmp1dCIgKyByZXMpDQogICAgICAgICAgICBzeXMuZXhpdCgpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwYXNzDQogICAgZWxzZToNCiAgICAgICAgcGFzcw0KDQoNCiMgQ1JFQVRFIENPREUgRk9SIFNIT1JUTElOSyBTRVJWRVINCmRlZiBjcmVhdGVjb2RlKGNvZGUpOg0KDQogICAgYXBpID0gImh0dHBzOi8vYmVkdWNvZGUtcGFzcy5oZXJva3VhcHAuY29tL2NyZWF0ZS8iICsgY29kZQ0KDQogICAgY2NvZGUgPSBjLmdldChhcGkpDQogICAgZGF0YSA9IGpzb24ubG9hZHMoY2NvZGUudGV4dCkNCiAgICBjaWQgPSBkYXRhWyJjb2RlX2lkIl0NCg0KICAgIHJldHVybiBjaWQNCg0KIyBHRVQgTElOSyBDT0RFIEZPUiBTSE9SVExJTksgU0VSVkVSDQoNCg0KZGVmIGdldGxpbmtjb2RlKGNvZGVpZCk6DQoNCiAgICBsaW5rY29kZSA9ICJodHRwczovL2JlZHVjb2RlLXBhc3MuaGVyb2t1YXBwLmNvbS8iICsgY29kZWlkDQoNCiAgICByZXR1cm4gbGlua2NvZGUNCg0KIyBHRVQgU0hPUlRMSU5LIEZST00gU0VSVkVSDQoNCg0KZGVmIGdldHNob3J0bGluayhsaW5rKToNCg0KICAgIGFwaSA9ICJodHRwczovL2JlZHVjb2RlLWxpbmsuaGVyb2t1YXBwLmNvbS9nZW5lcmF0ZS8iICsgbGluaw0KDQogICAgcnNob3J0ID0gYy5nZXQoYXBpKQ0KICAgIGRhdGEgPSBqc29uLmxvYWRzKHJzaG9ydC50ZXh0KQ0KICAgIHNsID0gZGF0YVsidXJsIl0NCg0KICAgIHJldHVybiBzbA0KDQojIEdFTkVSQVRFIFNIT1JUTElOSw0KDQoNCmRlZiBjcmVhdGVMaW5rKGNvZGUpOg0KICAgIGNvZGVpZCA9IGNyZWF0ZWNvZGUoY29kZSkNCiAgICBsaW5rcGFzc2NvZGUgPSBnZXRsaW5rY29kZShjb2RlaWQpDQogICAgbGlua3VybCA9IGdldHNob3J0bGluayhsaW5rcGFzc2NvZGUpDQoNCiAgICByZXR1cm4gbGlua3VybA0KDQojIEFVVEggRlJFRSBWRVJTSU9ODQoNCg0KZGVmIGF1dGhmcmVldmVyKCk6DQogICAgZ2xvYmFsIGxpbmtjb2RlDQogICAgZ2xvYmFsIHBhc3Njb2RlDQoNCiAgICBjbGVhcigpDQogICAgYmFubmVyKCkNCg0KICAgIGlmIGxpbmtjb2RlID09ICIiOg0KICAgICAgICBwYXNzY29kZSA9IHN0cmluZ2dlbigyMCkNCiAgICAgICAgbGlua2NvZGUgPSBjcmVhdGVMaW5rKHBhc3Njb2RlKQ0KICAgIGVsc2U6DQogICAgICAgIHBhc3MNCg0KICAgIHByaW50KCJMaW5rIDogIiwgbGlua2NvZGUpDQogICAgIyBNQVNVS0FOIFBBU1MgREFSSSBTSE9SVExJTksNCiAgICB0cnk6DQogICAgICAgIGlucHV0cGFzcyA9IGJpcnUyICsgJ1xyJyArIHB1dGloMiArICc+PiAnICsgcmVzICsga3VuaW5nMiArIFwNCiAgICAgICAgICAgICdTaWxhaGthbiBNYXN1a2FuIFBhc3N3b3JkIERhcmkgTGluayBEaSBBdGFzIDogJyArIHJlcw0KICAgICAgICBwYXNzaW5wdXQgPSBpbnB1dGltZW91dChwcm9tcHQ9aW5wdXRwYXNzLCB0aW1lb3V0PTYwMCkNCiAgICAgICAgaWYgcGFzc2lucHV0ID09ICIiOg0KICAgICAgICAgICAgYXV0aGZyZWV2ZXIoKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgaWYgcGFzc2lucHV0ICE9IHBhc3Njb2RlOg0KICAgICAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgICAgICBiYW5uZXIoKQ0KICAgICAgICAgICAgICAgIHByaW50KCJQYXNzd29yZCBZYW5nIEFuZGEgTWFzdWthbiBTYWxhaCwgU2lsYWhrYW4gQ29iYSBLZW1iYWxpIikNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgICAgICAgICAgYXV0aGZyZWV2ZXIoKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBsaW5rY29kZSA9ICIiDQogICAgICAgICAgICAgICAgcGFzc2NvZGUgPSAiIg0KICAgICAgICAgICAgICAgIHBhc3MNCiAgICBleGNlcHQgVGltZW91dE9jY3VycmVkOg0KICAgICAgICBhdXRoZnJlZXZlcigpDQoNCiMgQ0hFQ0sgTUVNQkVSIFNUQVRVUw0KDQoNCmRlZiBjaGVja3ByZW1zdGF0dXMocGFzc2NvZGUpOg0KICAgIHRyeToNCiAgICAgICAgbWVtYmVyID0gY2xpZW50LnF1ZXJ5KA0KICAgICAgICAgICAgcS5nZXQocS5tYXRjaChxLmluZGV4KCJtZW1iZXJfYnlfY29kZSIpLCBwYXNzY29kZSkpKQ0KICAgICAgICBzdGF0dXMgPSBpbnQobWVtYmVyWyJkYXRhIl1bIm1lbWJlcl9zdGF0dXMiXSkNCiAgICBleGNlcHQ6DQogICAgICAgIHN0YXR1cyA9IDANCg0KICAgIHJldHVybiBzdGF0dXMNCg0KIyBDUkVBVEUgRklMRSBQQVNTQ09ERQ0KDQoNCmRlZiBjcmVhdGVmaWxlcGFzcyhwYXNzYyk6DQogICAgZiA9IG9wZW4oInBhc3Njb2RlLnR4dCIsICJ3KyIpDQogICAgZi53cml0ZShwYXNzYykNCiAgICBmLmNsb3NlKCkNCg0KIyBSRUFEIEZJTEUgUEFTUyBJRiBFWElTVFMNCg0KDQpkZWYgcmVhZHBhc3MoKToNCiAgICBmID0gb3BlbihmaWxlLCAiciIpDQogICAgaWYgZi5tb2RlID09ICdyJzoNCiAgICAgICAgcGFzc2MgPSBmLnJlYWQoKQ0KDQogICAgcmV0dXJuIHBhc3NjDQoNCg0KIyBBVVRIIFBSRU1JVU0gVkVSU0lPTg0KZGVmIGF1dGhwcmVtdmVyKCk6DQogICAgY2xlYXIoKQ0KICAgIGJhbm5lcigpDQoNCiAgICAjIE1BU1VLQU4gUEFTUyBSRUdJU1RFUg0KICAgIHRyeToNCiAgICAgICAgaW5wdXRwYXNzID0gYmlydTIgKyAnXHInICsgcHV0aWgyICsgJz4+ICcgKyByZXMgKyBcDQogICAgICAgICAgICBrdW5pbmcyICsgJ1NpbGFoa2FuIE1hc3VrYW4gUGFzc2NvZGUgQW5kYTogJyArIHJlcw0KICAgICAgICBwYXNzaW5wdXQgPSBpbnB1dGltZW91dChwcm9tcHQ9aW5wdXRwYXNzLCB0aW1lb3V0PTYwMCkNCiAgICAgICAgaWYgcGFzc2lucHV0ID09ICIiOg0KICAgICAgICAgICAgYXV0aHByZW12ZXIoKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcGFzc2NvZGUgPSBjaGVja3ByZW1zdGF0dXMocGFzc2lucHV0KQ0KICAgICAgICAgICAgaWYgaW50KHBhc3Njb2RlKSAhPSAxOg0KICAgICAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgICAgICBiYW5uZXIoKQ0KICAgICAgICAgICAgICAgIHByaW50KCJQYXNzY29kZSBZYW5nIEFuZGEgTWFzdWthbiBTYWxhaCwgU2lsYWhrYW4gQ29iYSBLZW1iYWxpIikNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgICAgICAgICAgYXV0aHByZW12ZXIoKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBjcmVhdGVmaWxlcGFzcyhwYXNzaW5wdXQpDQoNCiAgICBleGNlcHQgVGltZW91dE9jY3VycmVkOg0KICAgICAgICBhdXRocHJlbXZlcigpDQoNCg0KIyBWRVJTSU9OIFZBTElEQVRFDQppZiBmcmVldmVyc2lvbiBpcyBUcnVlOg0KICAgICMgYXV0aGZyZWV2ZXIoKQ0KICAgIHBhc3MNCmVsc2U6DQogICAgZmlsZSA9IHBhdGhsaWIuUGF0aCgicGFzc2NvZGUudHh0IikNCiAgICBpZiBmaWxlLmV4aXN0cygpOg0KICAgICAgICBwYXNzY29kZSA9IHJlYWRwYXNzKCkNCiAgICAgICAgY2hlY2sgPSBjaGVja3ByZW1zdGF0dXMocGFzc2NvZGUpDQogICAgICAgIGlmIGludChjaGVjaykgIT0gMToNCiAgICAgICAgICAgIGF1dGhwcmVtdmVyKCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHBhc3MNCiAgICBlbHNlOg0KICAgICAgICBhdXRocHJlbXZlcigpDQoNCiMgREVLIE1PREUgUlVOIEFLVElGDQoNCg0KZGVmIGNoZWNrbW9kZXJ1bigpOg0KICAgIG1vZGVydW4gPSAwDQogICAgdXJ1dCA9IGludChteV9uYW1lc3BhY2UuYmV0c2V0KQ0KICAgIGlmIG9ialsiQmV0c2V0Il1bdXJ1dF1bIk1vZGUxIl1bIlRvZ2dsZSJdID09ICJPTiIgb3Igb2JqWyJCZXRzZXQiXVt1cnV0XVsiTW9kZTEiXVsiVG9nZ2xlIl0gPT0gIm9uIiBvciBvYmpbIkJldHNldCJdW3VydXRdWyJNb2RlMSJdWyJUb2dnbGUiXSA9PSAiT24iOg0KICAgICAgICBtb2RlcnVuICs9IDENCiAgICBlbHNlOg0KICAgICAgICBwYXNzDQogICAgaWYgb2JqWyJCZXRzZXQiXVt1cnV0XVsiTW9kZTIiXVsiVG9nZ2xlIl0gPT0gIk9OIiBvciBvYmpbIkJldHNldCJdW3VydXRdWyJNb2RlMiJdWyJUb2dnbGUiXSA9PSAib24iIG9yIG9ialsiQmV0c2V0Il1bdXJ1dF1bIk1vZGUyIl1bIlRvZ2dsZSJdID09ICJPbiI6DQogICAgICAgIG1vZGVydW4gKz0gMQ0KICAgIGVsc2U6DQogICAgICAgIHBhc3MNCiAgICBpZiBvYmpbIkJldHNldCJdW3VydXRdWyJNb2RlMyJdWyJUb2dnbGUiXSA9PSAiT04iIG9yIG9ialsiQmV0c2V0Il1bdXJ1dF1bIk1vZGUzIl1bIlRvZ2dsZSJdID09ICJvbiIgb3Igb2JqWyJCZXRzZXQiXVt1cnV0XVsiTW9kZTMiXVsiVG9nZ2xlIl0gPT0gIk9uIjoNCiAgICAgICAgbW9kZXJ1biArPSAxDQogICAgZWxzZToNCiAgICAgICAgcGFzcw0KICAgIGlmIG9ialsiQmV0c2V0Il1bdXJ1dF1bIk1vZGU0Il1bIlRvZ2dsZSJdID09ICJPTiIgb3Igb2JqWyJCZXRzZXQiXVt1cnV0XVsiTW9kZTQiXVsiVG9nZ2xlIl0gPT0gIm9uIiBvciBvYmpbIkJldHNldCJdW3VydXRdWyJNb2RlNCJdWyJUb2dnbGUiXSA9PSAiT24iOg0KICAgICAgICBtb2RlcnVuICs9IDENCiAgICBlbHNlOg0KICAgICAgICBwYXNzDQogICAgaWYgb2JqWyJCZXRzZXQiXVt1cnV0XVsiRmlib25hY2NpMSJdWyJUb2dnbGUiXSA9PSAiT04iIG9yIG9ialsiQmV0c2V0Il1bdXJ1dF1bIkZpYm9uYWNjaTEiXVsiVG9nZ2xlIl0gPT0gIm9uIiBvciBvYmpbIkJldHNldCJdW3VydXRdWyJGaWJvbmFjY2kxIl1bIlRvZ2dsZSJdID09ICJPbiI6DQogICAgICAgIG1vZGVydW4gKz0gMQ0KICAgIGVsc2U6DQogICAgICAgIHBhc3MNCg0KICAgIHJldHVybiBtb2RlcnVuDQoNCiMgVkFMSURBU0kgTU9ERSBSVU4NCg0KDQpkZWYgdmFsaWRhdGVtb2RlcnVuKG1vZGVydW4pOg0KICAgIGlmIG1vZGVydW4gPiAxOg0KICAgICAgICBjbGVhcigpDQogICAgICAgIGJhbm5lcigpDQoNCiAgICAgICAgcHJpbnQoYmlydTIgKyAnXHInICsgcHV0aWgyICsgJz4+ICcgKyByZXMgKyBtZXJhaDIgKyAnQW5kYSBNZW5nYWt0aWZrYW4gTGViaWggRGFyaSAxIE1vZGUhIScgKw0KICAgICAgICAgICAgICByZXMgKyBwdXRpaDIgKyAnLCBTaWxhaGthbiBDZWsgS2VtYmFsaSBGaWxlIHNldHRpbmdzLmpzb24gQW5kYScgKyByZXMpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgc3lzLmV4aXQoKQ0KICAgIGVsc2U6DQogICAgICAgIHBhc3MNCg0KDQpkZWYgYXV0aDJmYSgpOg0KICAgICMgQ0xFQVIgQkVGT1JFDQogICAgY2xlYXIoKQ0KICAgIGJhbm5lcigpDQoNCiAgICB0cnk6DQogICAgICAgIGlucHV0b3RwID0gYmlydTIgKyAnXHInICsgcHV0aWgyICsgJz4+ICcgKyByZXMgKyBrdW5pbmcyICsgXA0KICAgICAgICAgICAgJ1NpbGFoa2FuIG1hc3VrYW4ga29kZSBnb29nbGUgYXV0aGVudGljYXRvciBhbmRhIDogJyArIHJlcw0KICAgICAgICBvdHBpbnB1dCA9IGlucHV0aW1lb3V0KHByb21wdD1pbnB1dG90cCwgdGltZW91dD02MDApDQogICAgICAgIGlmIG90cGlucHV0ID09ICIiOg0KICAgICAgICAgICAgYXV0aDJmYSgpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gb3RwaW5wdXQNCg0KICAgIGV4Y2VwdCBUaW1lb3V0T2NjdXJyZWQ6DQogICAgICAgIGF1dGgyZmEoKQ0KDQoNCm1kY291bnQgPSBjaGVja21vZGVydW4oKQ0KdmFsaWRhdGVtb2RlcnVuKG1kY291bnQpDQoNCnVzZXJuYW1lID0gb2JqWyJBY2NvdW50Il1bIlVzZXJuYW1lIl0NCnBhc3N3b3JkID0gb2JqWyJBY2NvdW50Il1bIlBhc3N3b3JkIl0NCiMgU0VUIFVQIEFQSSBBS1NFUyBGUk9NIDk5OURPR0UuQ09NDQppZiBvYmpbIkFjY291bnQiXVsiQVBJIEFjY2VzcyJdID09ICJPRkYiIG9yIG9ialsiQWNjb3VudCJdWyJBUEkgQWNjZXNzIl0gPT0gIm9mZiIgb3Igb2JqWyJBY2NvdW50Il1bIkFQSSBBY2Nlc3MiXSA9PSAiT2ZmIjoNCiAgICBhcGlBa3NlcyA9ICJjZDZmOTg0M2IwNWY0MDQyYWQxZDQwNjBkMjkwYjJmZCINCmVsc2U6DQogICAgYXBpQWtzZXMgPSBvYmpbIkFjY291bnQiXVsiQVBJIEFjY2VzcyJdDQoNCmlmIG9ialsiQWNjb3VudCJdWyIyRkEiXSA9PSAiT04iIG9yIG9ialsiQWNjb3VudCJdWyIyRkEiXSA9PSAib24iIG9yIG9ialsiQWNjb3VudCJdWyIyRkEiXSA9PSAiT24iOg0KICAgIG90cHN0YXR1cyA9IFRydWUNCiAgICBvdHAgPSBhdXRoMmZhKCkNCmVsc2U6DQogICAgb3Rwc3RhdHVzID0gRmFsc2UNCg0KDQpkZWYgc3RvcGJldChwcm9maXQsIGJsLCBtYiwgbHMsIHRwKToNCiAgICBjbGVhcigpDQogICAgYmFubmVyKCkNCiAgICBwcmludChwdXRpaDIgKyAiTGltaXQgTWFrc2ltYWwgQmV0IFRlbGFoIFRlcnBlbnVoaSwgUHJvZml0IEFuZGEgOiAiICsgcmVzICsgaGlqYXUyICsgc3RyKHByb2ZpdCkgKyByZXMpDQogICAgcHJpbnQocHV0aWgyICsgIk1heCBCZXQgVGVyYWtoaXIgOiAiICsgcmVzICsgbWVyYWgyICsgcmV2KHN0cihtYikpICsgcmVzKQ0KICAgIHByaW50KHB1dGloMiArICJUb3RhbCBMb3NlIFN0cmlrZSA6ICIgKyByZXMgKyBtZXJhaDIgKyBzdHIobHMpICsgcmVzKQ0KICAgIHByaW50KHB1dGloMiArICJTYWxkbyBBbmRhIFNhYXQgSW5pIDogIiArIHJlcyArIGhpamF1MiArIHN0cihyZXYoc3RyKGJsKSkpICsgcmVzKQ0KICAgIHByaW50KHB1dGloMiArICJXYWt0dSBZYW5nIERpIEJ1dHVoa2FuIDogIiArIHJlcyArIHB1dGloMiArIHRwLnN0cmZ0aW1lKCIlSDolTTolUyIpICsgcmVzKQ0KICAgIHByaW50KHB1dGloMiArICJTZWxhbHUgQmVyaGF0aS1oYXRpICYgU2lsYWhrYW4gSmFsYW5rYW4gS2VtYmFsaSBTY3JpcHQiICsgcmVzKQ0KICAgIHRpbWUuc2xlZXAoMSkNCiAgICBzeXMuZXhpdCgpDQoNCg0KZGVmIHN0b3BsaW1pdGxzKHByb2ZpdCwgYmwsIG1iLCBscywgdHApOg0KICAgIGNsZWFyKCkNCiAgICBiYW5uZXIoKQ0KICAgIHByaW50KHB1dGloMiArICJMaW1pdCBMb3NlIFN0cmlrZSBUZWxhaCBUZXJwZW51aGksIFByb2ZpdCBBbmRhIDogIiArIHJlcyArIGhpamF1MiArIHN0cihwcm9maXQpICsgcmVzKQ0KICAgIHByaW50KHB1dGloMiArICJNYXggQmV0IFRlcmFraGlyIDogIiArIHJlcyArIG1lcmFoMiArIHJldihzdHIobWIpKSArIHJlcykNCiAgICBwcmludChwdXRpaDIgKyAiVG90YWwgTG9zZSBTdHJpa2UgOiAiICsgcmVzICsgbWVyYWgyICsgc3RyKGxzKSArIHJlcykNCiAgICBwcmludChwdXRpaDIgKyAiU2FsZG8gQW5kYSBTYWF0IEluaSA6ICIgKyByZXMgKyBoaWphdTIgKyBzdHIocmV2KHN0cihibCkpKSArIHJlcykNCiAgICBwcmludChwdXRpaDIgKyAiV2FrdHUgWWFuZyBEaSBCdXR1aGthbiA6ICIgKyByZXMgKyBwdXRpaDIgKyB0cC5zdHJmdGltZSgiJUg6JU06JVMiKSArIHJlcykNCiAgICBwcmludChwdXRpaDIgKyAiU2VsYWx1IEJlcmhhdGktaGF0aSAmIFNpbGFoa2FuIEphbGFua2FuIEtlbWJhbGkgU2NyaXB0IiArIHJlcykNCiAgICB0aW1lLnNsZWVwKDEpDQogICAgc3lzLmV4aXQoKQ0KDQoNCmRlZiB0YXJnZXRwcm9maXQocHJvZml0LCBibCwgbWIsIGxzLCB0cCk6DQogICAgY2xlYXIoKQ0KICAgIGJhbm5lcigpDQogICAgcHJpbnQocHV0aWgyICsgIlRhcmdldCBQcm9maXQgVGVsYWggVGVyY2FwYWkgOiAiICsgcmVzICsgaGlqYXUyICsgc3RyKHByb2ZpdCkgKyByZXMpDQogICAgcHJpbnQocHV0aWgyICsgIk1heCBCZXQgVGVyYWtoaXIgOiAiICsgcmVzICsgbWVyY'
love = ''
god = 'AgICAgICAgICAgICAgICAgIHByaW50KHJlcyArIHByb2ZpdGNvbG9yICsgcHV0aWgyICsgc3RyKHJvbGViZXQpICsgcmVzICsgIiAiICsgbWVyYWgyKyItIitzdHIoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldihzdHIoYW1vdW50KSkpICsgcmVzICsgYmlydTMgKyAiIEJhbGFuY2UgOiAiICsgcmVzICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJkY2hhbmdlIGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmNjb2xvciArIHJjZm9udGNvbG9yICsgY2hhbmNlcmFuZCArIHJlcyArIGxvc2Vjb2xvciArIHB1dGloMiArIHN0cihyb2xlYmV0KSArIHJlcyArICIgIiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyYWgyKyItIitzdHIocmV2KHN0cihhbW91bnQpKSkgKyByZXMgKyBiaXJ1MyArICIgQmFsYW5jZSA6ICIgKyByZXMgKyBzdHIocmV2KHN0cihiYWwpKSkgKyByZXMgKyBoaWphdTIgKyAiIFByb2ZpdCIgKyByZXMgKyAiIDogIiArIHN0cihyZXYoc3RyKHByb2ZpdCkpKSArIHJlcyArIGt1bmluZyArICIgVG90YWwiICsgcmVzICsgIiA6ICIgKyBzdHIod2QpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChsb3NlY29sb3IgKyBwdXRpaDIgKyBzdHIocm9sZWJldCkgKyByZXMgKyAiICIgKyBtZXJhaDIrIi0iK3N0cigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2KHN0cihhbW91bnQpKSkgKyByZXMgKyBiaXJ1MyArICIgQmFsYW5jZSA6ICIgKyByZXMgKyBzdHIocmV2KHN0cihiYWwpKSkgKyByZXMgKyBoaWphdTIgKyAiIFByb2ZpdCIgKyByZXMgKyAiIDogIiArIHN0cihyZXYoc3RyKHByb2ZpdCkpKSArIHJlcyArIGt1bmluZyArICIgVG90YWwiICsgcmVzICsgIiA6ICIgKyBzdHIod2QpKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIG5vX2xvc2UgPT0gMToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGFtb3VudCA+IHBheWluOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcGxvc2UgPSBpbnQoYW1vdW50KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudCA9IGludChwYXlpbikNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudCA9IGludChwYXlpbikNCiAgICAgICAgICAgIGVsaWYgb2JqWyJCZXRzZXQiXVt1cnV0XVsiTW9kZTIiXVsiVG9nZ2xlIl0gPT0gIk9OIiBvciBvYmpbIkJldHNldCJdW3VydXRdWyJNb2RlMiJdWyJUb2dnbGUiXSA9PSAib24iIG9yIG9ialsiQmV0c2V0Il1bdXJ1dF1bIk1vZGUyIl1bIlRvZ2dsZSJdID09ICJPbiI6DQogICAgICAgICAgICAgICAgIyBNT0RFLTIgUFJFUk9MTCBDT1VOVA0KICAgICAgICAgICAgICAgIGlmIGpzblsiUGF5T3V0Il0gIT0gMDoNCiAgICAgICAgICAgICAgICAgICAgbm9fd2luICs9IDENCiAgICAgICAgICAgICAgICAgICAgbm9fbG9zZSA9IDANCiAgICAgICAgICAgICAgICAgICAgYmFsID0gaW50KGpzblsiU3RhcnRpbmdCYWxhbmNlIl0pICsgaW50KGp1bSkNCiAgICAgICAgICAgICAgICAgICAgcHJvZml0ID0gYmFsLWN1cnJiYWxhbmNlDQogICAgICAgICAgICAgICAgICAgIGxhc3RwcmljZSA9IG1hcmtldGlkeA0KICAgICAgICAgICAgICAgICAgICB3ZGJhbGFuY2UgPSBmbG9hdChpbnQoYmFsKSkvKDEwICoqIDgpDQogICAgICAgICAgICAgICAgICAgIHdkID0gcnVwaWFoX2Zvcm1hdChsYXN0cHJpY2UgKiB3ZGJhbGFuY2UpDQoNCiAgICAgICAgICAgICAgICAgICAgaWYgcHJvZiA+IDA6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBhbW91bnQgPiBtYXhiZXQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4YmV0ID0gYW1vdW50DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgc3RvcG1heGJldCBpcyBUcnVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHN0b3BiZXRhbW91bnQgIT0gMCBhbmQgYW1vdW50ID4gc3RvcGJldGFtb3VudDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcGJldChwcm9mLCBiYWwsIG1heGJldCwgdG90YWxfbG9zZSwgdHApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJkY2hhbmdlIGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmNjb2xvciArIHJjZm9udGNvbG9yICsgY2hhbmNlcmFuZCArIHJlcyArIHByb2ZpdGNvbG9yICsgcHV0aWgyICsgc3RyKHJvbGViZXQpICsgcmVzICsgIiAiICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWphdTIrIisiK3N0cihyZXYoc3RyKGFtb3VudCkpKSArIHJlcyArIGJpcnUzICsgIiBCYWxhbmNlIiArIHJlcyArICIgOiAiICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmVzICsgcHJvZml0Y29sb3IgKyBwdXRpaDIgKyBzdHIocm9sZWJldCkgKyByZXMgKyAiICIgKyBoaWphdTIrIisiK3N0cigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2KHN0cihhbW91bnQpKSkgKyByZXMgKyBiaXJ1MyArICIgQmFsYW5jZSIgKyByZXMgKyAiIDogIiArIHN0cihyZXYoc3RyKGJhbCkpKSArIHJlcyArIGhpamF1MiArICIgUHJvZml0IiArIHJlcyArICIgOiAiICsgc3RyKHJldihzdHIocHJvZml0KSkpICsgcmVzICsga3VuaW5nICsgIiBUb3RhbCIgKyByZXMgKyAiIDogIiArIHN0cih3ZCkpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiByZGNoYW5nZSBpcyBUcnVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHJjY29sb3IgKyByY2ZvbnRjb2xvciArIGNoYW5jZXJhbmQgKyByZXMgKyBsb3NlY29sb3IgKyBwdXRpaDIgKyBzdHIocm9sZWJldCkgKyByZXMgKyAiICIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpamF1MisiKyIrc3RyKHJldihzdHIoYW1vdW50KSkpICsgcmVzICsgYmlydTMgKyAiIEJhbGFuY2UgOiAiICsgcmVzICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQobG9zZWNvbG9yICsgcHV0aWgyICsgc3RyKHJvbGViZXQpICsgcmVzICsgIiAiICsgaGlqYXUyKyIrIitzdHIoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldihzdHIoYW1vdW50KSkpICsgcmVzICsgYmlydTMgKyAiIEJhbGFuY2UgOiAiICsgcmVzICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCg0KICAgICAgICAgICAgICAgICAgICBhbW91bnQgPSBpbnQocGF5aW4pDQogICAgICAgICAgICAgICAgICAgIHByZXJvbGwgPSBpbnQob2JqWyJCZXRzZXQiXVt1cnV0XVsiTW9kZTIiXVsiUHJlcm9sbCJdKQ0KICAgICAgICAgICAgICAgICAgICBwcmVyb2xsU3RhdHVzID0gVHJ1ZQ0KDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgbm9fd2luID0gMA0KICAgICAgICAgICAgICAgICAgICBub19sb3NlICs9IDENCiAgICAgICAgICAgICAgICAgICAgcHJlcm9sbCAtPSAxDQogICAgICAgICAgICAgICAgICAgIGkgPSAwDQogICAgICAgICAgICAgICAgICAgIGJ1cnN0ID0gVHJ1ZQ0KICAgICAgICAgICAgICAgICAgICBiYWwgPSBpbnQoanNuWyJTdGFydGluZ0JhbGFuY2UiXSkgKyBpbnQoanVtKQ0KICAgICAgICAgICAgICAgICAgICBwcm9maXQgPSBiYWwtY3VycmJhbGFuY2UNCiAgICAgICAgICAgICAgICAgICAgbGFzdHByaWNlID0gbWFya2V0aWR4DQogICAgICAgICAgICAgICAgICAgIHdkYmFsYW5jZSA9IGZsb2F0KGludChiYWwpKS8oMTAgKiogOCkNCiAgICAgICAgICAgICAgICAgICAgd2QgPSBydXBpYWhfZm9ybWF0KGxhc3RwcmljZSAqIHdkYmFsYW5jZSkNCg0KICAgICAgICAgICAgICAgICAgICBpZiBwcm9mID4gMDoNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgc3RvcG1heGJldCBpcyBUcnVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHN0b3BiZXRhbW91bnQgIT0gMCBhbmQgYW1vdW50ID4gc3RvcGJldGFtb3VudDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcGJldChwcm9mLCBiYWwsIG1heGJldCwgdG90YWxfbG9zZSwgdHApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJkY2hhbmdlIGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmNjb2xvciArIHJjZm9udGNvbG9yICsgY2hhbmNlcmFuZCArIHJlcyArIHByb2ZpdGNvbG9yICsgcHV0aWgyICsgc3RyKHJvbGViZXQpICsgcmVzICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIgKyBtZXJhaDIrIi0iK3N0cihyZXYoc3RyKGFtb3VudCkpKSArIHJlcyArIGJpcnUzICsgIiBCYWxhbmNlIDogIiArIHJlcyArIHN0cihyZXYoc3RyKGJhbCkpKSArIHJlcyArIGhpamF1MiArICIgUHJvZml0IiArIHJlcyArICIgOiAiICsgc3RyKHJldihzdHIocHJvZml0KSkpICsgcmVzICsga3VuaW5nICsgIiBUb3RhbCIgKyByZXMgKyAiIDogIiArIHN0cih3ZCkpDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHJlcyArIHByb2ZpdGNvbG9yICsgcHV0aWgyICsgc3RyKHJvbGViZXQpICsgcmVzICsgIiAiICsgbWVyYWgyKyItIitzdHIoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldihzdHIoYW1vdW50KSkpICsgcmVzICsgYmlydTMgKyAiIEJhbGFuY2UgOiAiICsgcmVzICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJkY2hhbmdlIGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmNjb2xvciArIHJjZm9udGNvbG9yICsgY2hhbmNlcmFuZCArIHJlcyArIGxvc2Vjb2xvciArIHB1dGloMiArIHN0cihyb2xlYmV0KSArIHJlcyArICIgIiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyYWgyKyItIitzdHIocmV2KHN0cihhbW91bnQpKSkgKyByZXMgKyBiaXJ1MyArICIgQmFsYW5jZSA6ICIgKyByZXMgKyBzdHIocmV2KHN0cihiYWwpKSkgKyByZXMgKyBoaWphdTIgKyAiIFByb2ZpdCIgKyByZXMgKyAiIDogIiArIHN0cihyZXYoc3RyKHByb2ZpdCkpKSArIHJlcyArIGt1bmluZyArICIgVG90YWwiICsgcmVzICsgIiA6ICIgKyBzdHIod2QpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChyZXMgKyBsb3NlY29sb3IgKyBwdXRpaDIgKyBzdHIocm9sZWJldCkgKyByZXMgKyAiICIgKyBtZXJhaDIrIi0iK3N0cigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2KHN0cihhbW91bnQpKSkgKyByZXMgKyBiaXJ1MyArICIgQmFsYW5jZSA6ICIgKyByZXMgKyBzdHIocmV2KHN0cihiYWwpKSkgKyByZXMgKyBoaWphdTIgKyAiIFByb2ZpdCIgKyByZXMgKyAiIDogIiArIHN0cihyZXYoc3RyKHByb2ZpdCkpKSArIHJlcyArIGt1bmluZyArICIgVG90YWwiICsgcmVzICsgIiA6ICIgKyBzdHIod2QpKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIHByZXJvbGwgPT0gMDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudCA9IGludChiYXNlQmV0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJlcm9sbFN0YXR1cyA9IEZhbHNlDQogICAgICAgICAgICAgICAgICAgIGVsaWYgcHJlcm9sbCA8IDA6DQogICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQgPSBpbnQoYW1vdW50KSAqIE10cHJlcm9sbA0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50ID0gaW50KHBheWluKQ0KDQogICAgICAgICAgICBlbGlmIG9ialsiQmV0c2V0Il1bdXJ1dF1bIk1vZGUzIl1bIlRvZ2dsZSJdID09ICJPTiIgb3Igb2JqWyJCZXRzZXQiXVt1cnV0XVsiTW9kZTMiXVsiVG9nZ2xlIl0gPT0gIm9uIiBvciBvYmpbIkJldHNldCJdW3VydXRdWyJNb2RlMyJdWyJUb2dnbGUiXSA9PSAiT24iOg0KICAgICAgICAgICAgICAgICMgTU9ERS0zIFBSRVJPTEwgQ09VTlQgV0lUSCBNQVggTE9TRSBTVFJJS0UgTElNSVQNCiAgICAgICAgICAgICAgICBpZiBqc25bIlBheU91dCJdICE9IDA6DQogICAgICAgICAgICAgICAgICAgIG5vX3dpbiArPSAxDQogICAgICAgICAgICAgICAgICAgIG5vX2xvc2UgPSAwDQogICAgICAgICAgICAgICAgICAgIGJhbCA9IGludChqc25bIlN0YXJ0aW5nQmFsYW5jZSJdKSArIGludChqdW0pDQogICAgICAgICAgICAgICAgICAgIHByb2ZpdCA9IGJhbC1jdXJyYmFsYW5jZQ0KICAgICAgICAgICAgICAgICAgICBsYXN0cHJpY2UgPSBtYXJrZXRpZHgNCiAgICAgICAgICAgICAgICAgICAgd2RiYWxhbmNlID0gZmxvYXQoaW50KGJhbCkpLygxMCAqKiA4KQ0KICAgICAgICAgICAgICAgICAgICB3ZCA9IHJ1cGlhaF9mb3JtYXQobGFzdHByaWNlICogd2RiYWxhbmNlKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIHByb2YgPiAwOg0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBzdG9wbWF4YmV0IGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgc3RvcGJldGFtb3VudCAhPSAwIGFuZCBhbW91bnQgPiBzdG9wYmV0YW1vdW50Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wYmV0KHByb2YsIGJhbCwgbWF4YmV0LCB0b3RhbF9sb3NlLCB0cCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgYW1vdW50ID4gbWF4YmV0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGJldCA9IGFtb3VudA0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRvdGFsX2xvc2UgPj0gbWF4bHNsaW1pdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wbGltaXRscyhwcm9mLCBiYWwsIG1heGJldCwgdG90YWxfbG9zZSwgdHApDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmRjaGFuZ2UgaXMgVHJ1ZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChyY2NvbG9yICsgcmNmb250Y29sb3IgKyBjaGFuY2VyYW5kICsgcmVzICsgcHJvZml0Y29sb3IgKyBwdXRpaDIgKyBzdHIocm9sZWJldCkgKyByZXMgKyAiICIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpamF1MisiKyIrc3RyKHJldihzdHIoYW1vdW50KSkpICsgcmVzICsgYmlydTMgKyAiIEJhbGFuY2UiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihiYWwpKSkgKyByZXMgKyBoaWphdTIgKyAiIFByb2ZpdCIgKyByZXMgKyAiIDogIiArIHN0cihyZXYoc3RyKHByb2ZpdCkpKSArIHJlcyArIGt1bmluZyArICIgVG90YWwiICsgcmVzICsgIiA6ICIgKyBzdHIod2QpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChyZXMgKyBwcm9maXRjb2xvciArIHB1dGloMiArIHN0cihyb2xlYmV0KSArIHJlcyArICIgIiArIGhpamF1MisiKyIrc3RyKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXYoc3RyKGFtb3VudCkpKSArIHJlcyArIGJpcnUzICsgIiBCYWxhbmNlIiArIHJlcyArICIgOiAiICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJkY2hhbmdlIGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmNjb2xvciArIHJjZm9udGNvbG9yICsgY2hhbmNlcmFuZCArIHJlcyArIGxvc2Vjb2xvciArIHB1dGloMiArIHN0cihyb2xlYmV0KSArIHJlcyArICIgIiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlqYXUyKyIrIitzdHIocmV2KHN0cihhbW91bnQpKSkgKyByZXMgKyBiaXJ1MyArICIgQmFsYW5jZSA6ICIgKyByZXMgKyBzdHIocmV2KHN0cihiYWwpKSkgKyByZXMgKyBoaWphdTIgKyAiIFByb2ZpdCIgKyByZXMgKyAiIDogIiArIHN0cihyZXYoc3RyKHByb2ZpdCkpKSArIHJlcyArIGt1bmluZyArICIgVG90YWwiICsgcmVzICsgIiA6ICIgKyBzdHIod2QpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChsb3NlY29sb3IgKyBwdXRpaDIgKyBzdHIocm9sZWJldCkgKyByZXMgKyAiICIgKyBoaWphdTIrIisiK3N0cigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2KHN0cihhbW91bnQpKSkgKyByZXMgKyBiaXJ1MyArICIgQmFsYW5jZSA6ICIgKyByZXMgKyBzdHIocmV2KHN0cihiYWwpKSkgKyByZXMgKyBoaWphdTIgKyAiIFByb2ZpdCIgKyByZXMgKyAiIDogIiArIHN0cihyZXYoc3RyKHByb2ZpdCkpKSArIHJlcyArIGt1bmluZyArICIgVG90YWwiICsgcmVzICsgIiA6ICIgKyBzdHIod2QpKQ0KDQogICAgICAgICAgICAgICAgICAgIGFtb3VudCA9IGludChwYXlpbikNCiAgICAgICAgICAgICAgICAgICAgcHJlcm9sbCA9IGludChvYmpbIkJldHNldCJdW3VydXRdWyJNb2RlMyJdWyJQcmVyb2xsIl0pDQogICAgICAgICAgICAgICAgICAgIHByZXJvbGxTdGF0dXMgPSBUcnVlDQoNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBub193aW4gPSAwDQogICAgICAgICAgICAgICAgICAgIG5vX2xvc2UgKz0gMQ0KICAgICAgICAgICAgICAgICAgICBwcmVyb2xsIC09IDENCiAgICAgICAgICAgICAgICAgICAgaSA9IDANCiAgICAgICAgICAgICAgICAgICAgYnVyc3QgPSBUcnVlDQogICAgICAgICAgICAgICAgICAgIGJhbCA9IGludChqc25bIlN0YXJ0aW5nQmFsYW5jZSJdKSArIGludChqdW0pDQogICAgICAgICAgICAgICAgICAgIHByb2ZpdCA9IGJhbC1jdXJyYmFsYW5jZQ0KICAgICAgICAgICAgICAgICAgICBsYXN0cHJpY2UgPSBtYXJrZXRpZHgNCiAgICAgICAgICAgICAgICAgICAgd2RiYWxhbmNlID0gZmxvYXQoaW50KGJhbCkpLygxMCAqKiA4KQ0KICAgICAgICAgICAgICAgICAgICB3ZCA9IHJ1cGlhaF9mb3JtYXQobGFzdHByaWNlICogd2RiYWxhbmNlKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIHByb2YgPiAwOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmRjaGFuZ2UgaXMgVHJ1ZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChyY2NvbG9yICsgcmNmb250Y29sb3IgKyBjaGFuY2VyYW5kICsgcmVzICsgcHJvZml0Y29sb3IgKyBwdXRpaDIgKyBzdHIocm9sZWJldCkgKyByZXMgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgIiArIG1lcmFoMisiLSIrc3RyKHJldihzdHIoYW1vdW50KSkpICsgcmVzICsgYmlydTMgKyAiIEJhbGFuY2UgOiAiICsgcmVzICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmVzICsgcHJvZml0Y29sb3IgKyBwdXRpaDIgKyBzdHIocm9sZWJldCkgKyByZXMgKyAiICIgKyBtZXJhaDIrIi0iK3N0cigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2KHN0cihhbW91bnQpKSkgKyByZXMgKyBiaXJ1MyArICIgQmFsYW5jZSA6ICIgKyByZXMgKyBzdHIocmV2KHN0cihiYWwpKSkgKyByZXMgKyBoaWphdTIgKyAiIFByb2ZpdCIgKyByZXMgKyAiIDogIiArIHN0cihyZXYoc3RyKHByb2ZpdCkpKSArIHJlcyArIGt1bmluZyArICIgVG90YWwiICsgcmVzICsgIiA6ICIgKyBzdHIod2QpKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmRjaGFuZ2UgaXMgVHJ1ZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChyY2NvbG9yICsgcmNmb250Y29sb3IgKyBjaGFuY2VyYW5kICsgcmVzICsgbG9zZWNvbG9yICsgcHV0aWgyICsgc3RyKHJvbGViZXQpICsgcmVzICsgIiAiICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJhaDIrIi0iK3N0cihyZXYoc3RyKGFtb3VudCkpKSArIHJlcyArIGJpcnUzICsgIiBCYWxhbmNlIDogIiArIHJlcyArIHN0cihyZXYoc3RyKGJhbCkpKSArIHJlcyArIGhpamF1MiArICIgUHJvZml0IiArIHJlcyArICIgOiAiICsgc3RyKHJldihzdHIocHJvZml0KSkpICsgcmVzICsga3VuaW5nICsgIiBUb3RhbCIgKyByZXMgKyAiIDogIiArIHN0cih3ZCkpDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHJlcyArIGxvc2Vjb2xvciArIHB1dGloMiArIHN0cihyb2xlYmV0KSArIHJlcyArICIgIiArIG1lcmFoMisiLSIrc3RyKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXYoc3RyKGFtb3VudCkpKSArIHJlcyArIGJpcnUzICsgIiBCYWxhbmNlIDogIiArIHJlcyArIHN0cihyZXYoc3RyKGJhbCkpKSArIHJlcyArIGhpamF1MiArICIgUHJvZml0IiArIHJlcyArICIgOiAiICsgc3RyKHJldihzdHIocHJvZml0KSkpICsgcmVzICsga3VuaW5nICsgIiBUb3RhbCIgKyByZXMgKyAiIDogIiArIHN0cih3ZCkpDQoNCiAgICAgICAgICAgICAgICAgICAgaWYgcHJlcm9sbCA9PSAwOg0KICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50ID0gaW50KGJhc2VCZXQpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmVyb2xsU3RhdHVzID0gRmFsc2UNCiAgICAgICAgICAgICAgICAgICAgZWxpZiBwcmVyb2xsIDwgMDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudCA9IGludChhbW91bnQpICogTXRwcmVyb2xsDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQgPSBpbnQocGF5aW4pDQogICAgICAgICAgICBlbGlmIG9ialsiQmV0c2V0Il1bdXJ1dF1bIk1vZGU0Il1bIlRvZ2dsZSJdID09ICJPTiIgb3Igb2JqWyJCZXRzZXQiXVt1cnV0XVsiTW9kZTQiXVsiVG9nZ2xlIl0gPT0gIm9uIiBvciBvYmpbIkJldHNldCJdW3VydXRdWyJNb2RlNCJdWyJUb2dnbGUiXSA9PSAiT24iOg0KICAgICAgICAgICAgICAgICMgTU9ERS00DQogICAgICAgICAgICAgICAgaWYganNuWyJQYXlPdXQiXSAhPSAwOg0KICAgICAgICAgICAgICAgICAgICBub193aW4gKz0gMQ0KICAgICAgICAgICAgICAgICAgICBub19sb3NlID0gMA0KICAgICAgICAgICAgICAgICAgICBnbyA9IFRydWUNCiAgICAgICAgICAgICAgICAgICAgYmFsID0gaW50KGpzblsiU3RhcnRpbmdCYWxhbmNlIl0pICsgaW50KGp1bSkNCiAgICAgICAgICAgICAgICAgICAgcHJvZml0ID0gYmFsLWN1cnJiYWxhbmNlDQogICAgICAgICAgICAgICAgICAgIGxhc3RwcmljZSA9IG1hcmtldGlkeA0KICAgICAgICAgICAgICAgICAgICB3ZGJhbGFuY2UgPSBmbG9hdChpbnQoYmFsKSkvKDEwICoqIDgpDQogICAgICAgICAgICAgICAgICAgIHdkID0gcnVwaWFoX2Zvcm1hdChsYXN0cHJpY2UgKiB3ZGJhbGFuY2UpDQoNCiAgICAgICAgICAgICAgICAgICAgaWYgcHJvZiA+IDA6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBhbW91bnQgPiBtYXhiZXQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4YmV0ID0gYW1vdW50DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgc3RvcG1heGJldCBpcyBUcnVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHN0b3BiZXRhbW91bnQgIT0gMCBhbmQgYW1vdW50ID4gc3RvcGJldGFtb3VudDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcGJldChwcm9mLCBiYWwsIG1heGJldCwgdG90YWxfbG9zZSwgdHApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJkY2hhbmdlIGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmNjb2xvciArIHJjZm9udGNvbG9yICsgY2hhbmNlcmFuZCArIHJlcyArIHByb2ZpdGNvbG9yICsgcHV0aWgyICsgc3RyKHJvbGViZXQpICsgcmVzICsgIiAiICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWphdTIrIisiK3N0cihyZXYoc3RyKGFtb3VudCkpKSArIHJlcyArIGJpcnUzICsgIiBCYWxhbmNlIiArIHJlcyArICIgOiAiICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmVzICsgcHJvZml0Y29sb3IgKyBwdXRpaDIgKyBzdHIocm9sZWJldCkgKyByZXMgKyAiICIgKyBoaWphdTIrIisiK3N0cigNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2KHN0cihhbW91bnQpKSkgKyByZXMgKyBiaXJ1MyArICIgQmFsYW5jZSIgKyByZXMgKyAiIDogIiArIHN0cihyZXYoc3RyKGJhbCkpKSArIHJlcyArIGhpamF1MiArICIgUHJvZml0IiArIHJlcyArICIgOiAiICsgc3RyKHJldihzdHIocHJvZml0KSkpICsgcmVzICsga3VuaW5nICsgIiBUb3RhbCIgKyByZXMgKyAiIDogIiArIHN0cih3ZCkpDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiByZGNoYW5nZSBpcyBUcnVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHJjY29sb3IgKyByY2ZvbnRjb2xvciArIGNoYW5jZXJhbmQgKyByZXMgKyBsb3NlY29sb3IgKyBwdXRpaDIgKyBzdHIocm9sZWJldCkgKyByZXMgKyAiICIgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpamF1MisiKyIrc3RyKHJldihzdHIoYW1vdW50KSkpICsgcmVzICsgYmlydTMgKyAiIEJhbGFuY2UgOiAiICsgcmVzICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmVzICsgbG9zZWNvbG9yICsgcHV0aWgyICsgc3RyKHJvbGViZXQpICsgcmVzICsgIiAiICsgaGlqYXUyKyIrIitzdHIoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldihzdHIoYW1vdW50KSkpICsgcmVzICsgYmlydTMgKyAiIEJhbGFuY2UgOiAiICsgcmVzICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCg0KICAgICAgICAgICAgICAgICAgICAjIEJFVCBTRVRUSU5HDQogICAgICAgICAgICAgICAgICAgIGlmIG5vX3dpbiA9PSB3aW5HZXQxIGFuZCBnbyBpcyBUcnVlOg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50ID0gaW50KGJhc2VCZXQpICogTXQxDQoNCg0KICAgICAgICAgICAgICAgICAgICBpZiBub193aW4gPiB3aW5HZXQxIGFuZCBub193aW4gPD0gd2luR2V0MiBhbmQgZ28gaXMgVHJ1ZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRtcGxvc2UgPj0gaW50KGJhc2VCZXQpOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudCA9IGludCh0bXBsb3NlKSAqIE10Mg0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQgPSBpbnQoYmFzZUJldCkgKiBNdDINCg0KICAgICAgICAgICAgICAgICAgICBpZiBub193aW4gPiB3aW5HZXQyIGFuZCBnbyBpcyBUcnVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgdG1wbG9zZSA9IDANCiAgICAgICAgICAgICAgICAgICAgICAgIGdvID0gRmFsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudCA9IGludChwYXlpbikNCg0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIG5vX3dpbiA9IDANCiAgICAgICAgICAgICAgICAgICAgbm9fbG9zZSArPSAxDQogICAgICAgICAgICAgICAgICAgIGdvID0gRmFsc2UNCg0KICAgICAgICAgICAgICAgICAgICBiYWwgPSBpbnQoanNuWyJTdGFydGluZ0JhbGFuY2UiXSkgKyBpbnQoanVtKQ0KICAgICAgICAgICAgICAgICAgICBwcm9maXQgPSBiYWwtY3VycmJhbGFuY2UNCiAgICAgICAgICAgICAgICAgICAgbGFzdHByaWNlID0gbWFya2V0aWR4DQogICAgICAgICAgICAgICAgICAgIHdkYmFsYW5jZSA9IGZsb2F0KGludChiYWwpKS8oMTAgKiogOCkNCiAgICAgICAgICAgICAgICAgICAgd2QgPSBydXBpYWhfZm9ybWF0KGxhc3RwcmljZSAqIHdkYmFsYW5jZSkNCg0KICAgICAgICAgICAgICAgICAgICBpZiBwcm9mID4gMDoNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgc3RvcG1heGJldCBpcyBUcnVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHN0b3BiZXRhbW91bnQgIT0gMCBhbmQgYW1vdW50ID4gc3RvcGJldGFtb3VudDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcGJldChwcm9mLCBiYWwsIG1heGJldCwgdG90YWxfbG9zZSwgdHApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJkY2hhbmdlIGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmNjb2xvciArIHJjZm9udGNvbG9yICsgY2hhbmNlcmFuZCArIHJlcyArIHByb2ZpdGNvbG9yICsgcHV0aWgyICsgc3RyKHJvbGViZXQpICsgcmVzICsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIgKyBtZXJhaDIrIi0iK3N0cihyZXYoc3RyKGFtb3VudCkpKSArIHJlcyArIGJpcnUzICsgIiBCYWxhbmNlIDogIiArIHJlcyArIHN0cihyZXYoc3RyKGJhbCkpKSArIHJlcyArIGhpamF1MiArICIgUHJvZml0IiArIHJlcyArICIgOiAiICsgc3RyKHJldihzdHIocHJvZml0KSkpICsgcmVzICsga3VuaW5nICsgIiBUb3RhbCIgKyByZXMgKyAiIDogIiArIHN0cih3ZCkpDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHJlcyArIHByb2ZpdGNvbG9yICsgcHV0aWgyICsgc3RyKHJvbGViZXQpICsgcmVzICsgIiAiICsgbWVyYWgyKyItIitzdHIoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldihzdHIoYW1vdW50KSkpICsgcmVzICsgYmlydTMgKyAiIEJhbGFuY2UgOiAiICsgcmVzICsgc3RyKHJldihzdHIoYmFsKSkpICsgcmVzICsgaGlqYXUyICsgIiBQcm9maXQiICsgcmVzICsgIiA6ICIgKyBzdHIocmV2KHN0cihwcm9maXQpKSkgKyByZXMgKyBrdW5pbmcgKyAiIFRvdGFsIiArIHJlcyArICIgOiAiICsgc3RyKHdkKSkNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJkY2hhbmdlIGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQocmNjb2xvciArIHJjZm9udGNvbG9yICsgY2hhbmNlcmFuZCArIHJlcyArIGxvc2Vjb2xvciArIHB1dGloMiArIHN0cihyb2xlYmV0KSArIHJlcyArICIgIiArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyYWgyKyItIitzdHIocmV2KHN0cihhbW91bnQpKSkgKyByZXMgKyBiaXJ1MyArICIgQmFsYW5jZSA6ICIgKyB'
destiny = ''
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))